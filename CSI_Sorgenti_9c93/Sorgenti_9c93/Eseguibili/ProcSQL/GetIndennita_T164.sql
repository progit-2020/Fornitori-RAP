CREATE OR REPLACE PROCEDURE GETINDENNITA_T164(PROG_IN IN INTEGER, DATA_IN IN DATE, REPERIBILE IN VARCHAR2, DATOLIBERO IN VARCHAR2, VALORE IN VARCHAR2,IND_STD IN OUT VARCHAR2, IND_REP IN OUT VARCHAR2, IND_ESC IN OUT VARCHAR2) AS
  CURSOR C1 IS
  SELECT
    'SELECT '''|| CODICE ||''' INDENNITA FROM T030_ANAGRAFICO T030, T430_STORICO T430 WHERE ' ||
    'T030.PROGRESSIVO = T430.PROGRESSIVO AND :GIORNO BETWEEN DATADECORRENZA AND DATAFINE AND ' ||
    'T030.PROGRESSIVO = :PROGRESSIVO AND (' || REPLACE(ESPRESSIONE,':' || DATOLIBERO || ' ',' :DATOLIBERO ') ||')'
    ESPRESSIONE,
    TIPO_ASSOCIAZIONE,
    CODICE
    FROM T164_ASSOCIAZIONIINDENNITA WHERE
    DATA_IN BETWEEN DECORRENZA AND NVL(SCADENZA,TO_DATE('31123999','DDMMYYYY'));
  PIANIFICATO_T080 VARCHAR2(20);
  PIANIFICATO_T380 VARCHAR2(20);
  IND_COM          VARCHAR2(200);
  CURSORE_DINAMICO INTEGER;
  CURS             INTEGER;
  INDENNITA        VARCHAR2(5);
  ERRORE           BOOLEAN;
BEGIN
  IND_STD:=NULL;
  IND_REP:=NULL;
  IND_COM:=NULL;
  IND_ESC:=NULL;
  --Lettura del Dato pianificabile da pianificazione giornaliera o anagrafico
  PIANIFICATO_T080:=VALORE;
  --Lettura del Dato pianificabile da pianificazione reperibilità
  PIANIFICATO_T380:=NULL;
  IF REPERIBILE = 'S' THEN
    BEGIN
      SELECT DATOLIBERO INTO PIANIFICATO_T380
        FROM T380_PIANIFREPERIB
       WHERE PROGRESSIVO = PROG_IN AND DATA = DATA_IN;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         PIANIFICATO_T380:=NULL;
     END;
  END IF;
  --Estrazione delle indennità associate
  CURSORE_DINAMICO:=DBMS_SQL.OPEN_CURSOR;
  BEGIN
    FOR T1 IN C1 LOOP
      BEGIN
        ERRORE:=FALSE;
        DBMS_SQL.PARSE(CURSORE_DINAMICO,T1.ESPRESSIONE,DBMS_SQL.NATIVE);
        DBMS_SQL.DEFINE_COLUMN(CURSORE_DINAMICO,1,INDENNITA,5);
        DBMS_SQL.BIND_VARIABLE(CURSORE_DINAMICO, 'PROGRESSIVO', PROG_IN);
        DBMS_SQL.BIND_VARIABLE(CURSORE_DINAMICO, 'GIORNO', DATA_IN);
        IF INSTR(T1.ESPRESSIONE,':DATOLIBERO') > 0 THEN
          DBMS_SQL.BIND_VARIABLE(CURSORE_DINAMICO, 'DATOLIBERO', PIANIFICATO_T080);
        END IF;
        IF INSTR(T1.ESPRESSIONE,':DATACONTEGGIO') > 0 THEN
          DBMS_SQL.BIND_VARIABLE(CURSORE_DINAMICO, 'DATACONTEGGIO', DATA_IN);
        END IF;
        CURS:=DBMS_SQL.EXECUTE(CURSORE_DINAMICO);
        IF (T1.TIPO_ASSOCIAZIONE = 'A') AND (DBMS_SQL.FETCH_ROWS(CURSORE_DINAMICO) > 0) THEN
          DBMS_SQL.COLUMN_VALUE(CURSORE_DINAMICO, 1, INDENNITA);
          IF INSTR(T1.ESPRESSIONE,':DATOLIBERO') > 0 THEN
            IF IND_STD IS NOT NULL THEN
              IND_STD:=IND_STD || ',';
            END IF;
            IND_STD:=IND_STD || INDENNITA;
          ELSE
            IF IND_COM IS NOT NULL THEN
              IND_COM:=IND_COM || ',';
            END IF;
            IND_COM:=IND_COM || INDENNITA;
          END IF;
        ELSIF (T1.TIPO_ASSOCIAZIONE = 'E') AND (DBMS_SQL.FETCH_ROWS(CURSORE_DINAMICO) = 0) THEN
          IF IND_ESC IS NOT NULL THEN
            IND_ESC:=IND_ESC || ',';
          END IF;
          IND_ESC:=IND_ESC || T1.CODICE;
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          INDENNITA:=NULL;
          ERRORE:=TRUE;
      END;
      IF (NOT ERRORE) AND (PIANIFICATO_T380 IS NOT NULL) AND (INSTR(T1.ESPRESSIONE,':DATOLIBERO') > 0) AND (T1.TIPO_ASSOCIAZIONE = 'A') THEN
        DBMS_SQL.BIND_VARIABLE(CURSORE_DINAMICO, 'DATOLIBERO', PIANIFICATO_T380);
        BEGIN
          CURS:=DBMS_SQL.EXECUTE(CURSORE_DINAMICO);
          IF DBMS_SQL.FETCH_ROWS(CURSORE_DINAMICO) > 0 THEN
            DBMS_SQL.COLUMN_VALUE(CURSORE_DINAMICO, 1, INDENNITA);
            IF IND_REP IS NOT NULL THEN
              IND_REP:=IND_REP || ',';
            END IF;
            IND_REP:=IND_REP || INDENNITA;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            INDENNITA:=NULL;
        END;
      END IF;
    END LOOP;
    DBMS_SQL.CLOSE_CURSOR(CURSORE_DINAMICO);
    IF IND_COM IS NOT NULL THEN
      IF IND_STD IS NOT NULL THEN
        IND_STD:=IND_STD || ',' || IND_COM;
      ELSE
        IND_STD:=IND_COM;
      END IF;
      IF IND_REP IS NOT NULL THEN
        IND_REP:=IND_REP || ',' || IND_COM;
      END IF;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      IF DBMS_SQL.IS_OPEN(CURSORE_DINAMICO) THEN
        DBMS_SQL.CLOSE_CURSOR(CURSORE_DINAMICO);
      END IF;
  END;
END;
/