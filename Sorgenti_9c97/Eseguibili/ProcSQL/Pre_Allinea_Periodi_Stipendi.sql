CREATE OR REPLACE PROCEDURE
PRE_ALLINEA_PERIODI_STIPENDI (sCAMPI_NOT_NULL           IN OUT VARCHAR2,     -- contiene l'elenco dei valori di default dei campi not null
                             sESP_CUR_REL               IN OUT VARCHAR2,     -- contiene la condizione per ricalcolare solo le relazioni modificate
                             sDECORRENZE                IN OUT VARCHAR2,     -- contiene il dettaglio delle decorrenze per creare i periodi storici
                             CAMPI_SEL                  IN OUT VARCHAR2,     -- contiene l'elenco dei campi da estrarre per l'appiattimento dei record
                             TAB_FROM                   IN OUT VARCHAR2,     -- contiene l'elenco delle tabelle per l'appiattimento dei record
                             COND_WHERE                 IN OUT VARCHAR2) AS  -- contiene l'elenco delle condizioni per l'appiattimento dei record
-- Questa procedura richiamata per ogni dipendente verifica
-- se i dati del periodo successivo sono uguali a quelli del
-- precedente unificando in questo caso i due periodi
  -- DICHIARAZIONE CURSORI
  CURSOR CI030_DEC IS
    SELECT DISTINCT DECORRENZA
    FROM   I030_RELAZIONI_ANAGRAFE
    WHERE  TABELLA = 'P430_ANAGRAFICO'
    AND    TIPO IN ('L','S');
  CURSOR CI030_NULL IS
    SELECT DISTINCT TABELLA, COLONNA
    FROM   I030_RELAZIONI_ANAGRAFE
    WHERE  TABELLA = 'P430_ANAGRAFICO'
    AND    TIPO IN ('L','S');
  CURSOR CI020 IS
    SELECT I020.COLONNA
    FROM   I020_DATI_ALLINEAMENTO   I020,
           I030_RELAZIONI_ANAGRAFE  I030
    WHERE  I020.TIPO = 'R'
    AND    I020.TABELLA = 'P430_ANAGRAFICO'
    AND    I030.TABELLA = I020.TABELLA
    AND    I030.COLONNA = I020.COLONNA
    ORDER BY I020.COLONNA;
  CURSOR CCOLS IS
    SELECT COLUMN_NAME NOMEDATO
    FROM   COLS
    WHERE  TABLE_NAME = 'P430_ANAGRAFICO'
    AND    COLUMN_NAME NOT IN ('DECORRENZA','DECORRENZA_FINE');
  CURSORE_DINAMICO_NON_LIBERI INTEGER;
  CURS_NON_LIBERI             INTEGER;
  --
  -- DICHIARAZIONE ARRAY
  TYPE DATI_STORICI_NON_LIBERI_TYPE IS RECORD
    (X430_COLONNA   VARCHAR2(100),
     TABELLA        VARCHAR2(30),
     COD_COLONNA    VARCHAR2(100));
  TYPE ARRAY_DATI_STORICI_NON_LIBERI IS TABLE OF DATI_STORICI_NON_LIBERI_TYPE INDEX BY BINARY_INTEGER;
  NON_LIBERI_ARR ARRAY_DATI_STORICI_NON_LIBERI;
  --
  TYPE DATI_STORICI_TYPE IS RECORD
    (X430_COLONNA   VARCHAR2(100),
     TABELLA        VARCHAR2(30),
     COD_COLONNA    VARCHAR2(100));
  TYPE ARRAY_DATI_STORICI IS TABLE OF DATI_STORICI_TYPE INDEX BY BINARY_INTEGER;
  STORICI_ARR ARRAY_DATI_STORICI;
  --
  --
  -- DICHIARAZIONE VARIABILI
  I                           NUMBER          :=0 ;
  J                           NUMBER          :=0 ;
  ESPRESSIONE                 VARCHAR2(32767) :='';
  sCOD_COLONNA                VARCHAR2(100)   :='';
  sX430_COLONNA               VARCHAR2(100)   :='';
  dDEC_REC                    DATE                ;   -- inizio decorrenza ricavata dai cursori da usare con la CREAZIONE_STORICO_STIPENDI
  NULLABLE                    VARCHAR2(1)     :='';
  DATA_DEFAULT                VARCHAR2(100)   :='';
-- INIZIO ELABORAZIONE
BEGIN
  -- CARICO L'ELENCO DEI DATI STORICI NON LIBERI (CHE HANNO LA DECORRENZA_FINE!!!!!)
  NON_LIBERI_ARR(1).X430_COLONNA:= 'COD_VALUTA_STAMPA';                       NON_LIBERI_ARR(1).TABELLA:= 'P030_VALUTE';              NON_LIBERI_ARR(1).COD_COLONNA:= 'COD_VALUTA';
  NON_LIBERI_ARR(2).X430_COLONNA:= 'COD_CODICEINPS';                          NON_LIBERI_ARR(2).TABELLA:= 'P090_CODICIINPS';          NON_LIBERI_ARR(2).COD_COLONNA:= 'COD_CODICEINPS';
  NON_LIBERI_ARR(3).X430_COLONNA:= 'COD_CODICEINAIL';                         NON_LIBERI_ARR(3).TABELLA:= 'P092_CODICIINAIL';         NON_LIBERI_ARR(3).COD_COLONNA:= 'COD_CODICEINAIL';
  NON_LIBERI_ARR(4).X430_COLONNA:= 'COD_INQUADRINPDAP';                       NON_LIBERI_ARR(4).TABELLA:= 'P094_INQUADRINPDAP';       NON_LIBERI_ARR(4).COD_COLONNA:= 'COD_INQUADRINPDAP';
  NON_LIBERI_ARR(5).X430_COLONNA:= 'COD_INQUADRINPS';                         NON_LIBERI_ARR(5).TABELLA:= 'P096_INQUADRINPS';         NON_LIBERI_ARR(5).COD_COLONNA:= 'COD_INQUADRINPS';
  NON_LIBERI_ARR(6).X430_COLONNA:= 'COD_PARAMETRISTIPENDI';                   NON_LIBERI_ARR(6).TABELLA:= 'P212_PARAMETRISTIPENDI';   NON_LIBERI_ARR(6).COD_COLONNA:= 'COD_PARAMETRISTIPENDI';
  NON_LIBERI_ARR(7).X430_COLONNA:= 'COD_POSIZIONE_ECONOMICA||COD_CONTRATTO';  NON_LIBERI_ARR(7).TABELLA:= 'P220_LIVELLI';             NON_LIBERI_ARR(7).COD_COLONNA:= 'COD_POSIZIONE_ECONOMICA||COD_CONTRATTO';
  NON_LIBERI_ARR(8).X430_COLONNA:= 'COD_TABELLAANF';                          NON_LIBERI_ARR(8).TABELLA:= 'P236_TABELLEANF';          NON_LIBERI_ARR(8).COD_COLONNA:= 'COD_TABELLAANF';
  NON_LIBERI_ARR(9).X430_COLONNA:='COD_TIPOASSOGGETTAMENTO||COD_CONTRATTO';  NON_LIBERI_ARR(9).TABELLA:='P240_TIPIASSOGGETTAMENTI'; NON_LIBERI_ARR(9).COD_COLONNA:='COD_TIPOASSOGGETTAMENTO||COD_CONTRATTO';
  -- CICLO SUI DATI STORICI NON LIBERI
  J:=0;
  FOR I IN 1..NON_LIBERI_ARR.COUNT LOOP
    -- AGGIUNGO COLONNA.TABELLA.CODICE AL VETTORE DEI DATI STORICI
    J:=J+1;
    STORICI_ARR(J).X430_COLONNA:=NON_LIBERI_ARR(I).X430_COLONNA;
    STORICI_ARR(J).TABELLA:=NON_LIBERI_ARR(I).TABELLA;
    STORICI_ARR(J).COD_COLONNA:=NON_LIBERI_ARR(I).COD_COLONNA;
    -- ESTRAGGO LE DECORRENZE DEI DATI NON LIBERI STORICI
    ESPRESSIONE:='SELECT DISTINCT DECORRENZA FROM '||NON_LIBERI_ARR(I).TABELLA||' ORDER BY DECORRENZA';
    CURSORE_DINAMICO_NON_LIBERI:=DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(CURSORE_DINAMICO_NON_LIBERI,ESPRESSIONE,DBMS_SQL.NATIVE);
    DBMS_SQL.DEFINE_COLUMN(CURSORE_DINAMICO_NON_LIBERI,1,dDEC_REC);
    CURS_NON_LIBERI:=DBMS_SQL.EXECUTE(CURSORE_DINAMICO_NON_LIBERI);
    LOOP
      IF DBMS_SQL.FETCH_ROWS(CURSORE_DINAMICO_NON_LIBERI)>0 THEN
        DBMS_SQL.COLUMN_VALUE(CURSORE_DINAMICO_NON_LIBERI, 1, dDEC_REC);
        -- CREO UNO STORICO PER OGNI STORICIZZAZIONE DEL DATO NON LIBERO
        IF NVL(INSTR(sDECORRENZE,TO_CHAR(dDEC_REC,'DDMMYYYY') || ','),0) = 0 THEN
          sDECORRENZE:=sDECORRENZE || TO_CHAR(dDEC_REC,'DDMMYYYY') || ',';
        END IF;
      ELSE
        EXIT;
      END IF;
    END LOOP; -- FINE CURSORE_DINAMICO_NON_LIBERI --
    DBMS_SQL.CLOSE_CURSOR(CURSORE_DINAMICO_NON_LIBERI);
  END LOOP; -- FINE NON_LIBERI_ARR --
  -- CICLO SULLE DECORRENZE RELAZIONI DI TIPO VINCOLATO E/O LIBERO
  FOR RI030_DEC IN CI030_DEC LOOP
    dDEC_REC:=RI030_DEC.DECORRENZA;
    -- CREO UNO STORICO PER OGNI DECORRENZA DELLE RELAZIONI DI TIPO VINCOLATO
    IF NVL(INSTR(sDECORRENZE,TO_CHAR(dDEC_REC,'DDMMYYYY') || ','),0) = 0 THEN
      sDECORRENZE:=sDECORRENZE || TO_CHAR(dDEC_REC,'DDMMYYYY') || ',';
    END IF;
  END LOOP; -- FINE CI030_DEC --
  -- SALVO I VALORI DI DEFAULT DEI CAMPI DELLE RELAZIONI CHE NON POSSONO ESSERE NULL
  FOR RI030_NULL IN CI030_NULL LOOP
    BEGIN
      SELECT NULLABLE, DATA_DEFAULT
      INTO   NULLABLE, DATA_DEFAULT
      FROM   COLS
      WHERE  TABLE_NAME = RI030_NULL.TABELLA
      AND    COLUMN_NAME = RI030_NULL.COLONNA;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULLABLE:='Y';
        DATA_DEFAULT:='';
    END;
    IF NULLABLE = 'N' THEN
      sCAMPI_NOT_NULL:=sCAMPI_NOT_NULL || RI030_NULL.COLONNA || '-' || DATA_DEFAULT || ',';
    END IF;
  END LOOP; -- FINE CI030_NULL --
  -- CREO L'ESPRESSIONE SQL DEL CURSORE SULLE DECORRENZE
  sESP_CUR_REL:=NULL;
  FOR RI020 IN CI020 LOOP
    I030P_GETCATENA('P430_ANAGRAFICO',RI020.COLONNA,sESP_CUR_REL);
  END LOOP; -- FINE CI020 --
  IF sESP_CUR_REL IS NOT NULL THEN
    sESP_CUR_REL:=RTRIM(LTRIM(SUBSTR(sESP_CUR_REL,1,LENGTH(sESP_CUR_REL)-1)));
    sESP_CUR_REL:=' AND I030.COLONNA IN (' || sESP_CUR_REL || ')';
  ELSE
    sESP_CUR_REL:=' AND 1 = 2 ';
  END IF;
  -- CREO LA SELECT PER L'APPIATTIMENTO DEI RECORD
  CAMPI_SEL:=''' ''';
  FOR RCOLS IN CCOLS LOOP
    IF CAMPI_SEL = ''' ''' THEN
      CAMPI_SEL:= 'P430.' || RCOLS.NOMEDATO;
    ELSE
      CAMPI_SEL:=CAMPI_SEL || ' || P430.' || RCOLS.NOMEDATO;
    END IF;
  END LOOP;
  TAB_FROM:='';
  COND_WHERE:='';
  FOR I IN 1..STORICI_ARR.COUNT LOOP
    -- AGGIUNGO LA DESCRIZIONE TRA I DATI DA ESTRARRE
    CAMPI_SEL:=CAMPI_SEL || ' || T' || I || '.DESCRIZIONE';
    -- AGGIUNGO LA TABELLA NELL'ELENCO DELLA FROM
    TAB_FROM:=TAB_FROM || ', ' || STORICI_ARR(I).TABELLA || ' T' || I;
    -- AGGIUNGO LE CONDIZIONI DI ACCESSO
    sCOD_COLONNA:=STORICI_ARR(I).COD_COLONNA;
    sX430_COLONNA:=STORICI_ARR(I).X430_COLONNA;
    WHILE INSTR(sCOD_COLONNA,'||') > 0 LOOP
      COND_WHERE:=COND_WHERE || ' AND T' || I || '.' || SUBSTR(sCOD_COLONNA,1,INSTR(sCOD_COLONNA,'||')-1) || ' (+) = P430.' || SUBSTR(sX430_COLONNA,1,INSTR(sX430_COLONNA,'||')-1);
      sCOD_COLONNA:=SUBSTR(sCOD_COLONNA,INSTR(sCOD_COLONNA,'||')+2);
      sX430_COLONNA:=SUBSTR(sX430_COLONNA,INSTR(sX430_COLONNA,'||')+2);
    END LOOP;
    COND_WHERE:=COND_WHERE || ' AND T' || I || '.' || sCOD_COLONNA || ' (+) = P430.' || sX430_COLONNA ||
                              ' AND P430.DECORRENZA_FINE BETWEEN T' || I || '.DECORRENZA (+) AND T' || I || '.DECORRENZA_FINE (+)';
  END LOOP;
END;
/
